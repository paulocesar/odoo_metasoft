// Generated by CoffeeScript 1.9.0
(function() {
  var Contas, DateNavigator, F, Metasoft, fieldSearch, jsRoot, loadMoreHtml, modals, moment, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  jsRoot = this;

  _ = jsRoot._, Metasoft = jsRoot.Metasoft, moment = jsRoot.moment;

  F = Metasoft.F, modals = Metasoft.modals, fieldSearch = Metasoft.fieldSearch, DateNavigator = Metasoft.DateNavigator;

  loadMoreHtml = function() {
    return "<tr style=\"border: 0px;\"><td style='background-color: white; border: 0px;'>\n    <button class='load-more'>Carregar Mais</button>\n</td></tr>";
  };

  Contas = (function(_super) {
    __extends(Contas, _super);

    function Contas(opts) {
      this.renderLancamentos = __bind(this.renderLancamentos, this);
      this.loadMore = __bind(this.loadMore, this);
      this.doSearch = __bind(this.doSearch, this);
      this.model = 'lancamento';
      this.subTpls = {
        form: _.template($('#subtpl-display-contas-form').html()),
        parcelas: _.template($('#subtpl-display-contas-parcelaItem').html())
      };
      this.events = {
        'change #contasSearchForm .status': 'doSearch',
        'change #contasSearchForm .periodo': 'onChangePeriodo',
        'click .increment, .decrement': 'onClickMoveDate',
        'click .load-more': 'loadMore',
        'click .list-lancamentos input[name="pago"]': 'onClickPago'
      };
      Contas.__super__.constructor.apply(this, arguments);
      this.limit = 100;
      this.modal = new modals.Contas();
      this.modal.on('parcela:save', this.doSearch);
      this.parcelaModal = new modals.Parcela();
      this.parcelaModal.on('lancamento:pay', this.doSearch);
      this.search = fieldSearch({
        el: '#contasSearchForm',
        model: this.model,
        action: 'list'
      });
      this.search.on('search:done', this.renderLancamentos);
      this.dateNavigator = new DateNavigator({
        el: '#contasSearchForm .date-navigator',
        period: 'qualquer'
      });
      this.dateNavigator.on('date:change', this.doSearch);
    }

    Contas.prototype.doSearch = function() {
      this.offset = 0;
      this.search.setOptions({
        offset: this.offset,
        limit: this.limit
      });
      return this.search.doSearch();
    };

    Contas.prototype.loadMore = function() {
      this.offset += this.limit;
      this.search.setOptions({
        offset: this.offset
      });
      return this.search.doSearch();
    };

    Contas.prototype.onShow = function() {
      return this.doSearch();
    };

    Contas.prototype.renderLancamentos = function(data) {
      var $l, parcelas, showLoadMore;
      parcelas = data.parcelas;
      $l = this.$('.list-lancamentos');
      showLoadMore = parcelas.length >= this.limit;
      if (this.offset === 0) {
        this.parcelas = parcelas;
      } else {
        this.parcelas = this.parcelas.concat(parcelas);
      }
      $l.html(this.subTpls.parcelas({
        parcelas: this.parcelas
      }));
      if (showLoadMore) {
        return $l.append(loadMoreHtml());
      }
    };

    Contas.prototype.onChangePeriodo = function() {
      var $periodField, period;
      $periodField = this.$('#contasSearchForm .periodo');
      period = $periodField.val();
      if (period !== this.dateNavigator.period) {
        this.dateNavigator.setPeriod(period);
        return this.doSearch();
      }
    };

    Contas.prototype.onClickPago = function(ev) {
      var $checkbox, id, mustPay;
      ev.preventDefault();
      $checkbox = $(ev.currentTarget);
      id = $checkbox.parent('td').parent('tr').data('rowid');
      mustPay = $checkbox.is(':checked');
      if (mustPay) {
        this.post('crud/get', {
          table: 'parcela',
          id: id
        }, (function(_this) {
          return function(parcela) {
            _this.parcelaModal.setParcela(parcela);
            return _this.parcelaModal.show('crud');
          };
        })(this));
        return;
      }
      if (confirm('Deseja realemente cancelar o pagamento?')) {
        $checkbox.prop('checked', false);
        return this.postModel('lancamento', 'cancel', {
          parcelaId: id
        }, this.doSearch);
      }
    };

    return Contas;

  })(Metasoft.Display);

  Metasoft.displays.Contas = Contas;

}).call(this);
