// Generated by CoffeeScript 1.9.0
(function() {
  var Backbone, ContasModal, DropdownSearch, Metasoft, ace, createParcela, fieldValidator, jsRoot, moment, money, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  jsRoot = this;

  _ = jsRoot._, ace = jsRoot.ace, Backbone = jsRoot.Backbone, moment = jsRoot.moment, Metasoft = jsRoot.Metasoft;

  fieldValidator = Metasoft.fieldValidator, money = Metasoft.money, DropdownSearch = Metasoft.DropdownSearch;

  createParcela = function(numero, valor) {
    if (numero == null) {
      numero = 1;
    }
    if (valor == null) {
      valor = 0;
    }
    return {
      id: null,
      numero: numero,
      valor: valor,
      dataVencimento: moment().add(numero - 1, 'month').format('DD/MM/YYYY')
    };
  };

  ContasModal = (function(_super) {
    __extends(ContasModal, _super);

    function ContasModal(opts) {
      this.onChangeValorParcelas = __bind(this.onChangeValorParcelas, this);
      _.extend(this, opts);
      this.el = "#modalContas";
      this.subTpls = {
        parcelas: _.template($('#subtpl-display-contas-parcelaItemModal').html())
      };
      this.events = {
        'show.bs.modal': 'onShow',
        'hide.bs.modal': 'onHide',
        'change .valorBruto': 'onChangeValorBruto',
        'change .valorLiquido': 'onChangeValorLiquido',
        'change .quantParcelas': 'onChangeParcelas',
        'change .desconto': 'onChangeDesconto',
        'click .save': 'onClickSave'
      };
      ContasModal.__super__.constructor.apply(this, arguments);
      this.$formTop = this.$('.form-conta-top');
      this.$formBottom = this.$('.form-conta-bottom');
      this.$parcelas = this.$('table .parcelas');
      fieldValidator.apply(this.$el);
      this.$('.dropdownSearchParceiro').html(DropdownSearch.html('parceiroId'));
      this.dropdownSearch = new DropdownSearch({
        el: "#" + (this.$el.attr('id')) + " .dropdownSearchParceiro",
        name: 'parceiro',
        model: 'parceiro',
        action: 'search'
      });
      this.$parcelas.on('change', 'input[name="valor"]', this.onChangeValorParcelas);
    }

    ContasModal.prototype.onChangeValorBruto = function() {
      var data;
      data = this.getFormData();
      data.valorLiquido = data.valorBruto;
      money.setValue(this.$(".valorLiquido"), data.valorBruto);
      this.updateDesconto(data);
      return this.buildParcelas();
    };

    ContasModal.prototype.onChangeValorLiquido = function() {
      var data;
      data = this.getFormData();
      if (data.valorBruto < data.valorLiquido) {
        data.valorBruto = data.valorLiquido;
        money.setValue(this.$(".valorBruto"), data.valorLiquido);
      }
      this.updateDesconto(data);
      return this.buildParcelas();
    };

    ContasModal.prototype.onChangeDesconto = function() {
      var data;
      data = this.getFormData();
      if (data.valorBruto < data.desconto) {
        data.valorBruto = 0 - data.desconto;
        money.setValue(this.$(".valorBruto"), data.valorBruto);
      }
      data.valorLiquido = data.valorBruto + data.desconto;
      money.setValue(this.$(".valorLiquido"), data.valorLiquido);
      this.updateDesconto(data);
      return this.buildParcelas();
    };

    ContasModal.prototype.onChangeParcelas = function() {
      var data, parcelas, quant;
      parcelas = _.filter(this.parcelas, function(p) {
        return p.impostoNotaFiscalId == null;
      });
      data = this.getFormData();
      quant = parseInt(data.quantParcelas);
      if (!quant || parcelas.length === quant) {
        if (!quant) {
          this.$('.quantParcelas').val(parcelas.length);
        }
        return;
      }
      return this.buildParcelas();
    };

    ContasModal.prototype.onChangeValorParcelas = function() {
      var last, lastValor, liquido, p, totalPrimeiras, _i, _len, _ref;
      if (this.parcelas.length <= 1) {
        return;
      }
      this.parcelas = this.getFormData().parcelas;
      liquido = this.getFormData().valorLiquido;
      last = _.last(this.parcelas);
      totalPrimeiras = 0;
      _ref = this.parcelas;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.numero !== last.numero) {
          totalPrimeiras += p.valor;
        }
      }
      lastValor = liquido - totalPrimeiras;
      if (lastValor < 0) {
        return;
      }
      last.valor = money.round(lastValor);
      return this.renderModalParcelas();
    };

    ContasModal.prototype.updateDesconto = function(data) {
      var desconto;
      desconto = 0 - money.round(data.valorBruto - data.valorLiquido);
      return this.$('.desconto').maskMoney('mask', desconto);
    };

    ContasModal.prototype.buildParcelas = function() {
      var data, i, quant, valor, _i;
      data = this.getFormData();
      quant = parseInt(data.quantParcelas);
      valor = money.round(parseFloat(data.valorLiquido) / quant);
      this.parcelas = [];
      for (i = _i = 1; 1 <= quant ? _i <= quant : _i >= quant; i = 1 <= quant ? ++_i : --_i) {
        this.parcelas.push(createParcela(i, valor));
      }
      return this.renderModalParcelas();
    };

    ContasModal.prototype.renderModalParcelas = function() {
      this.$parcelas.html(this.subTpls.parcelas({
        parcelas: this.parcelas
      }));
      this.$parcelas.find('tr').each(function() {
        return fieldValidator.apply($(this));
      });
      return this.$parcelas.find('.mask-date-day').data("DateTimePicker").minDate(moment());
    };

    ContasModal.prototype.onShow = function(ev) {
      var $btn, contaId, title;
      this.resetFormData();
      $btn = $(ev.relatedTarget);
      this.tipoConta = $btn.data('contatipo');
      contaId = $btn.data('contaid');
      this.parcelas = [];
      title = 'Conta a Receber';
      this.$('.modal-dialog').removeClass('invert-money-color');
      if (this.tipoConta === 'pagar') {
        title = 'Conta a Pagar';
        this.$('.modal-dialog').addClass('invert-money-color');
      }
      if (!contaId) {
        title = "Nova " + title;
        this.parcelas.push(createParcela());
      }
      this.$('.modal-title').html(title);
      return this.renderModalParcelas();
    };

    ContasModal.prototype.resetFormData = function() {
      fieldValidator.reset(this.$formTop);
      fieldValidator.reset(this.$formBottom);
      return this.$formTop.find('.quantParcelas').val('1');
    };

    ContasModal.prototype.getFormData = function() {
      var data;
      data = fieldValidator.getValues(this.$formTop);
      _.defaults(data, fieldValidator.getValues(this.$formBottom));
      data.parcelas = [];
      this.$parcelas.find('tr').each(function() {
        return data.parcelas.push(fieldValidator.getValues($(this)));
      });
      data.tipoConta = this.tipoConta === 'pagar' ? '1' : '0';
      return data;
    };

    ContasModal.prototype.onHide = function(ev) {
      return this.$('.modal-dialog').removeClass('invert-money-color');
    };

    ContasModal.prototype.isParcelasSumMatches = function(data) {
      var p, ps, sum, _i, _len;
      sum = 0;
      ps = data.parcelas;
      for (_i = 0, _len = ps.length; _i < _len; _i++) {
        p = ps[_i];
        sum += p.valor;
      }
      if (money.round(sum) === money.round(data.valorLiquido)) {
        return true;
      }
      alert('A soma das parcelas está diferente do valor líquido!');
      return false;
    };

    ContasModal.prototype.onClickSave = function() {
      var d, data, isValid;
      data = this.getFormData();
      isValid = fieldValidator.isValid(this.$formTop, true) && fieldValidator.isValid(this.$formBottom, true) && this.isParcelasSumMatches(data);
      if (!isValid) {
        return;
      }
      this.$('.save').attr('disabled', 'disabled');
      d = {
        model: 'lancamento',
        action: 'save',
        data: data
      };
      return this.post('crud/model', d, (function(_this) {
        return function(conta) {
          _this.$('.save').removeAttr('disabled');
          _this.$el.modal('hide');
          return _this.trigger('parcela:save');
        };
      })(this));
    };

    ContasModal.prototype.get = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Metasoft.get.apply(Metasoft, args);
    };

    ContasModal.prototype.post = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Metasoft.post.apply(Metasoft, args);
    };

    return ContasModal;

  })(Backbone.View);

  Metasoft.modals.Contas = ContasModal;

}).call(this);
