// Generated by CoffeeScript 1.9.0
(function() {
  var Backbone, ContasModal, Metasoft, ace, defaultParcela, fieldValidator, jsRoot, moment, _,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  jsRoot = this;

  _ = jsRoot._, ace = jsRoot.ace, Backbone = jsRoot.Backbone, moment = jsRoot.moment, Metasoft = jsRoot.Metasoft;

  fieldValidator = Metasoft.fieldValidator;

  defaultParcela = function() {
    return {
      id: null,
      titulo: 'Parcela 1',
      dataVencimento: moment().format('DD/MM/YYYY'),
      valor: 'R$ 0,00',
      status: 'pendente'
    };
  };

  ContasModal = (function(_super) {
    __extends(ContasModal, _super);

    function ContasModal(opts) {
      _.extend(this, opts);
      this.el = "#modalContas";
      this.subTpls = {
        parcelas: _.template($('#subtpl-display-contas-parcelaItem').html())
      };
      this.events = {
        'show.bs.modal': 'onShow',
        'hide.bs.modal': 'onHide'
      };
      ContasModal.__super__.constructor.apply(this, arguments);
      fieldValidator.apply(this.$el);
      this.$parcelas = this.$el.find('table .parcelas');
    }

    ContasModal.prototype.renderModalParcelas = function(parcelas) {
      parcelas = [].concat(parcelas);
      this.$parcelas.html(this.subTpls.parcelas({
        parcelas: parcelas
      }));
      return fieldValidator.apply(this.$parcelas);
    };

    ContasModal.prototype.onShow = function(ev) {
      var $btn, contaId, contaType, title;
      $btn = $(ev.relatedTarget);
      contaType = $btn.data('conta');
      contaId = $btn.data('contaid');
      title = 'Conta a Receber';
      if (contaType === 'pagar') {
        title = 'Conta a Pagar';
      }
      if (!contaId) {
        title = "Nova " + title;
        this.renderModalParcelas(defaultParcela());
      }
      return this.$el.find('.modal-title').html(title);
    };

    ContasModal.prototype.onHide = function(ev) {};

    ContasModal.prototype.get = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Metasoft.get.apply(Metasoft, args);
    };

    ContasModal.prototype.post = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Metasoft.post.apply(Metasoft, args);
    };

    return ContasModal;

  })(Backbone.View);

  Metasoft.modals.Contas = ContasModal;

}).call(this);
