// Generated by CoffeeScript 1.9.0
(function() {
  var $, Metasoft, jsRoot, _;

  jsRoot = this;

  $ = jsRoot.$, _ = jsRoot._;

  Metasoft = {
    VERSION: '0.0.1',
    tpls: {},
    components: {},
    init: function(appName) {
      this.appName = appName;
      $('body').append("<div id='" + appName + "'></div>");
      this.container = $("#" + appName);
      return $('.tpl').each(function() {
        var $el, name;
        $el = $(this);
        name = $el.attr('id').replace('tpl-', '');
        return Metasoft.tpls[name] = _.template($el.html());
      });
    },
    render: function(name, data) {
      if (data == null) {
        data = {};
      }
      data = this.tpls[name](data);
      if (data == null) {
        throw new Error("Cannot find '" + name + "' template screen");
      }
      return this.container.html(data);
    },
    post: function(action, data, callback) {
      return $.post("/" + action, {
        data: JSON.stringify(data)
      }, (function(_this) {
        return function(raw) {
          var res;
          res = _this.evalResponse(raw.data);
          if (!raw.success) {
            return callback(res);
          }
          return callback(null, res);
        };
      })(this));
    },
    evalResponse: function(response) {
      return (new Function("return " + response))();
    },
    addCss: function(files) {
      return this.addFile({
        files: files,
        appendElement: document.getElementsByTagName("head")[0],
        type: 'link',
        extension: 'css',
        urlField: 'href',
        data: {
          type: "text/css",
          rel: "stylesheet",
          media: "screen,print"
        }
      });
    },
    addJs: function(files) {
      return this.addFile({
        files: files,
        appendElement: document.getElementsByTagName("body")[0],
        type: 'script',
        extension: 'js',
        urlField: 'src',
        data: {
          type: "text/javascript"
        }
      });
    },
    addFile: function(options) {
      var appendElement, data, extension, file, files, link, type, urlField, _i, _len, _results;
      files = options.files, type = options.type, extension = options.extension, data = options.data, appendElement = options.appendElement, urlField = options.urlField;
      files = [].concat(files);
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        link = document.createElement(type);
        link[urlField] = "/" + extension + "/" + file + "." + extension;
        _.extend(link, data);
        _results.push(appendElement.appendChild(link));
      }
      return _results;
    }
  };

  jsRoot.Metasoft = Metasoft;

}).call(this);
