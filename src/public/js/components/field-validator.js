// Generated by CoffeeScript 1.9.0
(function() {
  var Metasoft, buildValidatorFunc, errorLabel, fieldValidator, hasClasses, hasMoneyClass, inputBackgroundColor, jsRoot, masks, money, rgxNotBankDigit, rgxNotDigit, validators, _;

  jsRoot = this;

  _ = jsRoot._, Metasoft = jsRoot.Metasoft;

  money = Metasoft.money;

  rgxNotBankDigit = /[^\dx]/g;

  rgxNotDigit = /[^\d]/g;

  inputBackgroundColor = '#FFF9F4';

  errorLabel = {
    apply: function(f, msg) {
      if (f.next().hasClass('error-message')) {
        return;
      }
      f.css('background-color', inputBackgroundColor);
      if (msg) {
        return f.after("<div class='error-message'>\n    <span class='glyphicon glyphicon-warning-sign'></span>\n    " + msg + "\n</div>");
      }
    },
    remove: function(f) {
      var errEl;
      errEl = f.next();
      if (!errEl.hasClass('error-message')) {
        return;
      }
      f.css('background-color', 'white');
      return errEl.remove();
    },
    check: function(f, isValid, message) {}
  };

  validators = {
    'not-empty': {
      test: function(v) {
        return $.trim(v) !== '';
      },
      message: 'Não pode ser vazio'
    },
    'not-zero': {
      test: function(v) {
        var _ref;
        return (_ref = $.trim(v)) !== '' && _ref !== 0 && _ref !== '0' && _ref !== 'R$ 0,00';
      },
      message: 'Não pode ser zero'
    }
  };

  masks = {
    'mask-money': function($el) {
      return money.applyMask($el);
    },
    'mask-money-positive': function($el) {
      return money.applyMask($el, {
        allowNegative: false
      });
    },
    'mask-money-negative': function($el) {
      var func;
      money.applyMask($el, {
        allowNegative: true
      });
      func = function() {
        var val;
        val = $el.maskMoney('unmasked')[0];
        if (val > 0) {
          val = 0 - val;
          return $el.maskMoney('mask', val);
        }
      };
      return $el.on('keyup', func).on('change', func);
    },
    'mask-number-bank': function($el) {
      var func;
      func = function() {
        var f, l, val;
        f = $(this);
        val = "" + (f.val());
        val = val.replace(rgxNotBankDigit, '');
        if (val.length > 3) {
          l = val.length - 1;
          val = val.slice(0, -1) + "-" + val.slice(l, l + 1);
        }
        return f.val(val);
      };
      return $el.on('keyup', func).on('change', func).on('focusout', func);
    },
    'mask-only-number': function($el) {
      var func;
      func = function() {
        var f;
        f = $(this);
        return f.val(("" + (f.val())).replace(rgxNotDigit, ''));
      };
      return $el.on('keyup', func).on('change', func).on('focusout', func);
    },
    'mask-date-day': function($el) {
      return $el.datetimepicker({
        viewMode: 'days',
        format: 'DD/MM/YYYY'
      });
    },
    'mask-date-month': function($el) {
      return $el.datetimepicker({
        viewMode: 'months',
        format: 'MM/YYYY'
      });
    }
  };

  buildValidatorFunc = function(v) {
    return function() {
      var f;
      f = $(this);
      if (v.test(f.val())) {
        errorLabel.remove(f);
        return;
      }
      return errorLabel.apply(f, v.message);
    };
  };

  hasClasses = function(el, arr) {
    var cls, _i, _len;
    arr = [].concat(arr);
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      cls = arr[_i];
      if ($(el).hasClass(cls)) {
        return true;
      }
    }
    return false;
  };

  hasMoneyClass = function(el) {
    return hasClasses(el, ['mask-money', 'mask-money-positive', 'mask-money-negative']);
  };

  fieldValidator = {
    apply: function(el) {
      this.applyValidators(el, validators);
      return this.applyMasks(el, masks);
    },
    reset: function(el) {
      var m;
      $(el).find('input, textarea').css('background-color', 'white');
      $(el).find('.error-message').remove();
      $(el).find('input, textarea').val('');
      $(el).find('input[type="checkbox"]').attr('checked', false);
      $(el).find('select').each(function() {
        var s;
        s = $(this);
        return s.val(s.find("option:first").val());
      });
      m = $(el).find('.mask-money, .mask-money-positive, .mask-money-negative');
      m.val(money.defaultVal);
      return money.setColor(m);
    },
    fill: function(el, data) {
      var $el, f, name, value;
      this.reset(el);
      $el = $(el);
      for (name in data) {
        value = data[name];
        f = $el.find("[name='" + name + "']");
        if (f.attr('type') === 'checkbox') {
          f.prop('checked', value);
          continue;
        }
        if (hasMoneyClass(f)) {
          f.addClass(money.getColorCls(value));
          value = money.format(value);
        }
        f.val(value);
      }
    },
    applyValidators: function(el, valids) {
      var cls, data, func;
      for (cls in valids) {
        data = valids[cls];
        func = buildValidatorFunc(data);
        $(el).find("." + cls).on('change', func).on('focusout', func);
      }
    },
    applyMasks: function(el, mks) {
      var applyFunc, cls;
      for (cls in mks) {
        applyFunc = mks[cls];
        applyFunc($(el).find("." + cls));
      }
    },
    isValid: function(el, highlightInvalid) {
      var $el, cls, isValid, v;
      if (highlightInvalid == null) {
        highlightInvalid = false;
      }
      $el = $(el);
      isValid = true;
      for (cls in validators) {
        v = validators[cls];
        $el.find("." + cls).each(function() {
          var f;
          f = $(this);
          if (!v.test(f.val())) {
            isValid = false;
            if (highlightInvalid) {
              errorLabel.apply(f, v.message);
            }
            return;
          }
          return errorLabel.remove(f);
        });
      }
      return isValid;
    },
    getValues: function(el) {
      var data;
      data = {};
      $(el).find('input, textarea, select').each(function() {
        var f, val;
        f = $(this);
        val = hasMoneyClass(f) ? f.maskMoney('unmasked')[0] : f.val();
        return data[f.attr('name')] = val;
      });
      $(el).find('input[type="checkbox"]').each(function() {
        var f;
        f = $(this);
        return data[f.attr('name')] = f.is(":checked") ? '1' : '0';
      });
      return data;
    },
    removeError: function(input, message) {
      return errorLabel.remove($(input));
    },
    addError: function(input, message) {
      return errorLabel.apply($(input), message);
    },
    isValidAndUnique: function(el, items, id, highlightInvalid) {
      var form, unique, valid;
      if (highlightInvalid == null) {
        highlightInvalid = false;
      }
      valid = this.isValid(el, highlightInvalid);
      form = $(el);
      unique = true;
      if (id) {
        items = _.filter(items, function(i) {
          return i.id !== id;
        });
      }
      form.find('.unique').each(function() {
        var f, name, sameVal, val;
        f = $(this);
        name = f.attr('name');
        val = $.trim(f.val()).toLowerCase();
        sameVal = function(d) {
          return $.trim("" + d[name]).toLowerCase() === val;
        };
        if (!_.isEmpty(_.filter(items, sameVal))) {
          unique = false;
          if (highlightInvalid) {
            errorLabel.apply(f, "Valor já existe");
          }
        }
      });
      return unique && valid;
    }
  };

  Metasoft.fieldValidator = Metasoft.F = fieldValidator;

}).call(this);
