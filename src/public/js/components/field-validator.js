// Generated by CoffeeScript 1.9.0
(function() {
  var Metasoft, buildValidatorFunc, errorLabel, fieldValidator, jsRoot, masks, validators, _;

  jsRoot = this;

  _ = jsRoot._, Metasoft = jsRoot.Metasoft;

  errorLabel = {
    apply: function(f, msg) {
      if (f.next().hasClass('error-message')) {
        return;
      }
      f.css('background-color', '#FFE8E8');
      return f.after("<div class='error-message'>" + msg + "</div>");
    },
    remove: function(f) {
      var errEl;
      errEl = f.next();
      if (!errEl.hasClass('error-message')) {
        return;
      }
      f.css('background-color', 'white');
      return errEl.remove();
    },
    check: function(f, isValid, message) {}
  };

  validators = {
    'not-empty': {
      test: function(v) {
        return v !== '';
      },
      message: 'Não pode ser vazio'
    },
    'not-zero': {
      test: function(v) {
        return v !== '' && v !== 0 && v !== '0' && v !== 'R$ 0.00';
      },
      message: 'Não pode ser zero'
    }
  };

  masks = {
    'mask-money': function($el) {
      return $el.maskMoney({
        prefix: 'R$ ',
        thousands: '.',
        decimals: ',',
        allowZero: true
      });
    }
  };

  buildValidatorFunc = function(v) {
    return function() {
      var f;
      f = $(this);
      if (v.test(f.val())) {
        errorLabel.remove(f);
        return;
      }
      return errorLabel.apply(f, v.message);
    };
  };

  fieldValidator = {
    apply: function(el) {
      var $el, applyFunc, cls, data, func, _results;
      $el = $(el);
      for (cls in validators) {
        data = validators[cls];
        func = buildValidatorFunc(data);
        $el.find("." + cls).on('change', func).on('focusout', func).on('keyup', func);
      }
      _results = [];
      for (cls in masks) {
        applyFunc = masks[cls];
        _results.push(applyFunc($el.find("." + cls)));
      }
      return _results;
    },
    isValid: function(el, highlightInvalid) {
      var $el, cls, isValid, v;
      if (highlightInvalid == null) {
        highlightInvalid = false;
      }
      $el = $(el);
      if ($el.find('error-message').length > 0) {
        return true;
      }
      isValid = true;
      for (cls in validators) {
        v = validators[cls];
        $el.find("." + cls).each(function() {
          var f;
          f = $(this);
          if (!v.test(f.val())) {
            isValid = false;
            if (highlightInvalid) {
              errorLabel.apply(f, v.message);
            }
            return;
          }
          return errorLabel.remove(f);
        });
      }
      return isValid;
    }
  };

  Metasoft.components.fieldValidator = fieldValidator;

}).call(this);
