// Generated by CoffeeScript 1.9.0
(function() {
  var Metasoft, buildValidatorFunc, errorLabel, fieldValidator, hasClasses, hasMoneyClass, inputBackgroundColor, jsRoot, masks, money, validators, _;

  jsRoot = this;

  _ = jsRoot._, Metasoft = jsRoot.Metasoft;

  money = Metasoft.money;

  inputBackgroundColor = '#FFF9F4';

  errorLabel = {
    apply: function(f, msg) {
      if (f.next().hasClass('error-message')) {
        return;
      }
      f.css('background-color', inputBackgroundColor);
      if (msg) {
        return f.after("<div class='error-message'>\n    <span class='glyphicon glyphicon-warning-sign'></span>\n    " + msg + "\n</div>");
      }
    },
    remove: function(f) {
      var errEl;
      errEl = f.next();
      if (!errEl.hasClass('error-message')) {
        return;
      }
      f.css('background-color', 'white');
      return errEl.remove();
    },
    check: function(f, isValid, message) {}
  };

  validators = {
    'not-empty': {
      test: function(v) {
        return $.trim(v) !== '';
      },
      message: 'Não pode ser vazio'
    },
    'not-zero': {
      test: function(v) {
        var _ref;
        return (_ref = $.trim(v)) !== '' && _ref !== 0 && _ref !== '0' && _ref !== 'R$ 0.00';
      },
      message: 'Não pode ser zero'
    }
  };

  masks = {
    'mask-money': function($el) {
      return money.applyMask($el);
    },
    'mask-money-positive': function($el) {
      return money.applyMask($el, {
        allowNegative: false
      });
    }
  };

  buildValidatorFunc = function(v) {
    return function() {
      var f;
      f = $(this);
      if (v.test(f.val())) {
        errorLabel.remove(f);
        return;
      }
      return errorLabel.apply(f, v.message);
    };
  };

  hasClasses = function(el, arr) {
    var cls, _i, _len;
    arr = [].concat(arr);
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      cls = arr[_i];
      if ($(el).hasClass(cls)) {
        return true;
      }
    }
    return false;
  };

  hasMoneyClass = function(el) {
    return hasClasses(el, ['mask-money', 'mask-money-positive']);
  };

  fieldValidator = {
    apply: function(el) {
      this.applyValidators(el, validators);
      return this.applyMasks(el, masks);
    },
    reset: function(el) {
      $(el).find('input, textarea').css('background-color', 'white');
      $(el).find('.error-message').remove();
      $(el).find('input, textarea').val('');
      return $(el).find('.mask-money').val(money.defaultVal).css('color', 'black');
    },
    fill: function(el, data) {
      var $el, f, name, value;
      $el = $(el);
      for (name in data) {
        value = data[name];
        f = $el.find("[name='" + name + "']");
        if (hasMoneyClass(f)) {
          f.css('color', money.getColor(value));
          value = money.format(value);
        }
        f.val(value);
      }
    },
    applyValidators: function(el, valids) {
      var cls, data, func;
      for (cls in valids) {
        data = valids[cls];
        func = buildValidatorFunc(data);
        $(el).find("." + cls).on('change', func).on('focusout', func).on('keyup', func);
      }
    },
    applyMasks: function(el, mks) {
      var applyFunc, cls;
      for (cls in mks) {
        applyFunc = mks[cls];
        applyFunc($(el).find("." + cls));
      }
    },
    isValid: function(el, highlightInvalid) {
      var $el, cls, isValid, v;
      if (highlightInvalid == null) {
        highlightInvalid = false;
      }
      $el = $(el);
      isValid = true;
      for (cls in validators) {
        v = validators[cls];
        $el.find("." + cls).each(function() {
          var f;
          f = $(this);
          if (!v.test(f.val())) {
            isValid = false;
            if (highlightInvalid) {
              errorLabel.apply(f, v.message);
            }
            return;
          }
          return errorLabel.remove(f);
        });
      }
      return isValid;
    },
    getValues: function(el) {
      var data;
      data = {};
      $(el).find('input, textarea').each(function() {
        var f, val;
        f = $(this);
        val = hasMoneyClass(f) ? f.maskMoney('unmasked')[0] : f.val();
        return data[f.attr('name')] = val;
      });
      return data;
    }
  };

  Metasoft.fieldValidator = fieldValidator;

}).call(this);
