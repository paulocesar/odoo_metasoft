// Generated by CoffeeScript 1.9.0
(function() {
  var $, F, FieldSearch, Metasoft, V, jsRoot, _,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  jsRoot = this;

  _ = jsRoot._, $ = jsRoot.$, Metasoft = jsRoot.Metasoft, V = jsRoot.V;

  F = Metasoft.F;

  Metasoft.fieldSearch = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(FieldSearch, args, function(){});
  };

  FieldSearch = (function(_super) {
    __extends(FieldSearch, _super);

    function FieldSearch(opts) {
      this.onSearchResult = __bind(this.onSearchResult, this);
      _.extend(this, opts);
      V.demandGoodString(this.model, 'model');
      V.demandGoodString(this.action, 'action');
      this.events = {
        'keyup input.query': 'doLazySearch',
        'change input.query': 'doLazySearch'
      };
      FieldSearch.__super__.constructor.apply(this, arguments);
      this.options = {};
      this.lazySearch = _.debounce(this.doSearch, 1000);
    }

    FieldSearch.prototype.setOptions = function(opts) {
      return _.extend(this.options, opts);
    };

    FieldSearch.prototype.doLazySearch = function() {
      Metasoft.showLoading();
      return this.lazySearch();
    };

    FieldSearch.prototype.doSearch = function() {
      var data;
      data = {
        model: this.model,
        action: this.action,
        data: _.extend(this.getData(), this.options)
      };
      return Metasoft.post('crud/model', data, this.onSearchResult);
    };

    FieldSearch.prototype.onSearchResult = function(_at_items) {
      this.items = _at_items;
      return this.trigger('search:done', this.items);
    };

    FieldSearch.prototype.getData = function() {
      return _.defaults(F.getValues(this.$el), {
        query: this.$('.query').val()
      });
    };

    return FieldSearch;

  })(Backbone.View);

}).call(this);
