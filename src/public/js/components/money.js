// Generated by CoffeeScript 1.9.0
(function() {
  var defaultConfig, money;

  defaultConfig = {
    prefix: 'R$ ',
    thousands: '.',
    decimal: ',',
    allowZero: true,
    allowNegative: true,
    precision: 2
  };

  money = {
    defaultVal: 'R$ 0,00',
    applyMask: function($el, config) {
      var color, v;
      if (config == null) {
        config = {};
      }
      _.defaults(config, defaultConfig);
      v = parseFloat($el.val()) || 0.00;
      color = this.getColor(v);
      v = this.format(v);
      $el.maskMoney(config);
      $el.val(v).css('color', color);
      return $el.on('keyup', function() {
        var value;
        value = $(this).maskMoney('unmasked')[0];
        return $(this).css('color', money.getColor(value));
      });
    },
    getColor: function(value) {
      var color;
      color = value > 0 ? '#35BA00' : 'black';
      if (value < 0) {
        color = 'red';
      }
      return color;
    },
    round: function(num, decimalPlaces) {
      var d, f, i, m, n, r;
      if (decimalPlaces == null) {
        decimalPlaces = 2;
      }
      d = decimalPlaces || 0;
      m = Math.pow(10, d);
      n = +(d ? num * m : num).toFixed(8);
      i = Math.floor(n);
      f = n - i;
      if (f === 0.5) {
        r = i % 2 === 0 ? i : i + 1;
      } else {
        r = Math.round(n);
      }
      if (d) {
        return r / m;
      } else {
        return r;
      }
    },
    html: function(num) {
      return "<font color='" + (this.getColor(num)) + "'>" + (this.format(num)) + "</font>";
    },
    format: function(num) {
      var c, d, i, j, s, t;
      num = this.round(num);
      c = defaultConfig.precision;
      d = defaultConfig.decimal;
      t = defaultConfig.thousands;
      s = num < 0 ? "-" : "";
      i = parseInt(num = Math.abs(+num || 0).toFixed(c)) + "";
      j = (j = i.length) > 3 ? j % 3 : 0;
      return s + defaultConfig.prefix + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(num - i).toFixed(c).slice(2) : "");
    }
  };

  Metasoft.money = money;

}).call(this);
