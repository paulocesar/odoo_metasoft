// Generated by CoffeeScript 1.9.0
(function() {
  var Backbone, DateNavigator, Metasoft, jsRoot, todayDate, todayMonth,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  jsRoot = this;

  Backbone = jsRoot.Backbone, Metasoft = jsRoot.Metasoft;

  todayDate = function() {
    return moment().format('DD/MM/YYYY');
  };

  todayMonth = function() {
    return moment().format('MM/YYYY');
  };

  DateNavigator = (function(_super) {
    __extends(DateNavigator, _super);

    function DateNavigator(opts) {
      _.extend(this, opts);
      if (this.period == null) {
        this.period = 'qualquer';
      }
      this.events = {
        'click .increment, .decrement': 'onClickMoveDate'
      };
      DateNavigator.__super__.constructor.apply(this, arguments);
      this.setPeriod(this.period);
      this.$('.data').on('dp.change', (function(_this) {
        return function() {
          return _this.trigger('date:change');
        };
      })(this));
    }

    DateNavigator.prototype.setPeriod = function(_at_period) {
      var $dateField, d, _ref;
      this.period = _at_period;
      if ((_ref = this.period) !== 'dia' && _ref !== 'mes') {
        this.period = 'qualquer';
      }
      $dateField = this.$('.data');
      d = $dateField.data("DateTimePicker");
      if (this.period === 'qualquer') {
        d.disable();
        $dateField.val('');
      }
      if (this.period === 'mes') {
        d.enable();
        d.viewMode('months');
        d.format('MM/YYYY');
        d.date(todayMonth());
      }
      if (this.period === 'dia') {
        d.enable();
        d.viewMode('days');
        d.format('DD/MM/YYYY');
        return d.date(todayDate());
      }
    };

    DateNavigator.prototype.onClickMoveDate = function(ev) {
      var $date, $el, d, date, format, increment, mustDecrement, type;
      if (this.period === 'qualquer') {
        return;
      }
      $el = $(ev.currentTarget);
      mustDecrement = $el.hasClass('decrement');
      $date = this.$('.data');
      date = $date.val();
      type = 'days';
      format = 'DD/MM/YYYY';
      if (this.period === 'mes') {
        type = 'months';
        format = 'MM/YYYY';
      }
      increment = 1;
      if (mustDecrement) {
        increment = -1;
      }
      d = $date.data("DateTimePicker");
      d.date(moment(date, format).add(increment, type).format(format));
      return this.trigger('date:change');
    };

    return DateNavigator;

  })(Backbone.View);

  Metasoft.DateNavigator = DateNavigator;

}).call(this);
