// Generated by CoffeeScript 1.9.0
(function() {
  var CrudDisplay, Metasoft, fieldSearch, fieldValidator, jsRoot, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  jsRoot = this;

  _ = jsRoot._, Metasoft = jsRoot.Metasoft;

  fieldValidator = Metasoft.fieldValidator, fieldSearch = Metasoft.fieldSearch;

  CrudDisplay = (function(_super) {
    __extends(CrudDisplay, _super);

    function CrudDisplay(opts) {
      this.renderItemlist = __bind(this.renderItemlist, this);
      this.onClickRemove = __bind(this.onClickRemove, this);
      this.onClickSave = __bind(this.onClickSave, this);
      this.refreshList = __bind(this.refreshList, this);
      if (this.tpls == null) {
        this.tpls = {};
      }
      if (this.events == null) {
        this.events = {};
      }
      if (this.withEmpresa == null) {
        this.withEmpresa = true;
      }
      _.defaults(this.events, {
        'click .crud-list tr': 'onClickItemList',
        'click .save': 'onClickSave',
        'click .new': 'onClickReset',
        'click .remove': 'onClickRemove'
      });
      this.crudItems = [];
      CrudDisplay.__super__.constructor.apply(this, arguments);
      _.defaults(this.tpls, {
        crudList: _.template($("#tpl-display-" + this.name + "ListItem").html())
      });
      this.search = fieldSearch({
        el: "#display-" + this.name + " .crud-search",
        model: 'crud',
        action: 'search'
      });
      this.search.setOptions({
        table: this.table,
        withEmpresa: this.withEmpresa
      });
      this.search.on('search:done', this.renderItemlist);
      this.form = this.$('.form-crud');
    }

    CrudDisplay.prototype.onShow = function() {
      return this.refreshList();
    };

    CrudDisplay.prototype.refreshList = function() {
      this.$('.query').val('');
      return this.search.doSearch();
    };

    CrudDisplay.prototype.isValid = function() {
      return true;
    };

    CrudDisplay.prototype.onClickReset = function() {
      return this.resetForm();
    };

    CrudDisplay.prototype.resetForm = function() {
      fieldValidator.reset(this.form);
      this.id = null;
      return this.updateButtonsDom();
    };

    CrudDisplay.prototype.onClickSave = function() {
      var data, valid;
      valid = fieldValidator.isValidAndUnique(this.form, this.crudItems, this.id, true);
      if (!(valid && this.isValid())) {
        return;
      }
      data = fieldValidator.getValues(this.form);
      if (this.id != null) {
        data.id = this.id;
      }
      return this.post('crud/upsert', {
        table: this.table,
        withEmpresa: this.withEmpresa,
        data: data
      }, this.refreshList);
    };

    CrudDisplay.prototype.onClickRemove = function() {
      return this.post('crud/remove', {
        table: this.table,
        data: {
          id: this.id
        }
      }, (function(_this) {
        return function(res) {
          if (res.related) {
            alert('Este item não pode ser removido pois está sendo usado');
          }
          return _this.refreshList();
        };
      })(this));
    };

    CrudDisplay.prototype.renderItemlist = function(list) {
      if (list) {
        this.crudItems = list;
      }
      this.$('.crud-list').html(this.tpls.crudList({
        items: this.crudItems
      }));
      return this.resetForm();
    };

    CrudDisplay.prototype.onClickItemList = function(ev) {
      var id;
      id = $(ev.currentTarget).data('rowid');
      return this.showItemInForm(id);
    };

    CrudDisplay.prototype.showItemInForm = function(_at_id) {
      var account;
      this.id = _at_id;
      account = _.findWhere(this.crudItems, {
        id: this.id
      });
      fieldValidator.fill(this.form, account);
      return this.updateButtonsDom();
    };

    CrudDisplay.prototype.updateButtonsDom = function() {
      this.$('.new').toggleClass('hidden', this.id == null);
      return this.$('.remove').toggleClass('hidden', this.id == null);
    };

    return CrudDisplay;

  })(Metasoft.Display);

  Metasoft.CrudDisplay = CrudDisplay;

}).call(this);
