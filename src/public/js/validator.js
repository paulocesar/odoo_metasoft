// Generated by CoffeeScript 1.9.0
(function() {
  var argumentError, jsRoot, rgxNonWhitespace, validator, _;

  validator = {};

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    _ = require('underscore');
    module.exports = validator;
  } else {
    jsRoot = this;
    _ = jsRoot._;
    jsRoot.validator = jsRoot.V = validator;
  }

  argumentError = function(demand, argName, customMsg) {
    var s;
    s = ["Argument ", argName != null ? "'" + argName + "' " : "", "must ", customMsg != null ? customMsg : demand].join('');
    throw new Error(s);
  };

  rgxNonWhitespace = /\S/;

  _.extend(validator, {
    demandNotNil: function(a, argName, customMsg) {
      if (a != null) {
        return true;
      }
      return argumentError("not be null or undefined", argName, customMsg);
    },
    demandNonEmpty: function(a, argName, customMsg) {
      if (_.isArray(a)) {
        return validator.isGoodArray(a);
      }
    },
    demandArray: function(a, argName, customMsg) {
      if (_.isArray(a)) {
        return true;
      }
      return argumentError("be an array", argName, customMsg);
    },
    demandNonEmptyArray: function(a, argName, customMsg) {
      if (_.isArray(a) && !_.isEmpty(a)) {
        return true;
      }
      return argumentError("be a non-empty array", argName, customMsg);
    },
    demandGoodArray: function(a, argName, customMsg) {
      if (validator.isGoodArray(a)) {
        return true;
      }
      return argumentError("be a non-empty array free of nil elements", argName, customMsg);
    },
    demandArrayOfStrings: function(a, argName, customMsg) {
      if (validator.isArrayOfStrings(a)) {
        return true;
      }
      return argumentError("be an array of strings", argName, customMsg);
    },
    demandArrayOfGoodStrings: function(a, argName, customMsg) {
      if (validator.isArrayOfGoodStrings(a)) {
        return true;
      }
      return argumentError("be an array of non-empty, non-all-whitespace strings", argName, customMsg);
    },
    demandArrayOfGoodNumbers: function(a, argName, customMsg) {
      if (validator.isArrayOfGoodNumbers(a)) {
        return true;
      }
      return argumentError("be an array of non-infinity, non-NaN numbers", argName, customMsg);
    },
    demandObject: function(o, argName, customMsg) {
      if (_.isObject(o)) {
        return true;
      }
      return argumentError("be an object", argName, customMsg);
    },
    demandGoodObject: function(o, argName, customMsg) {
      if (validator.isGoodObject(o)) {
        return true;
      }
      return argumentError("be a defined, non-empty object", argName, customMsg);
    },
    demandType: function(o, t, argName, customMsg) {
      if (validator.isOfType(o, t)) {
        return true;
      }
      return argumentError("be an object of type '" + (t.name || t) + "'", argName, customMsg);
    },
    demandKeys: function(o, keys, argName, customMsg) {
      var expectedKeys;
      if (validator.hasKeys(o, keys)) {
        return true;
      }
      expectedKeys = keys.join(", ");
      return argumentError("be a defined object containing [" + expectedKeys + "] key(s)", argName, customMsg);
    },
    demandHash: function(o, argName, customMsg) {
      if (validator.isHash(o)) {
        return true;
      }
      return argumentError("be a non-empty, non-array object (ie, a hash)", argName, customMsg);
    },
    demandFunction: function(f, argName, customMsg) {
      if (_.isFunction(f)) {
        return true;
      }
      return argumentError("be a function", argName, customMsg);
    },
    demandString: function(s, argName, customMsg) {
      if (_.isString(s)) {
        return true;
      }
      return argumentError("be a string", argName, customMsg);
    },
    demandGoodString: function(s, argName, customMsg) {
      if (validator.isGoodString(s)) {
        return true;
      }
      return argumentError("be a non-empty, non-all-whitespace string", argName, customMsg);
    },
    demandNumber: function(n, argName, customMsg) {
      if (_.isNumber(n)) {
        return true;
      }
      return argumentError("be a number", argName, customMsg);
    },
    demandGoodNumber: function(n, argName, customMsg) {
      if (validator.isGoodNumber(n)) {
        return true;
      }
      return argumentError("be a number", argName, customMsg);
    },
    demandBoolean: function(b, argName, customMsg) {
      if (_.isBoolean(b)) {
        return true;
      }
      return argumentError("be a boolean value", argName, customMsg);
    },
    demandDate: function(d, argName, customMsg) {
      if (_.isDate(d)) {
        return true;
      }
      return argumentError("be a Date", argName, customMsg);
    },
    isHash: function(h) {
      return _.isObject(h) && !_.isEmpty(h) && !_.isArray(h);
    },
    isGoodObject: function(o) {
      return _.isObject(o) && !_.isEmpty(o);
    },
    hasKeys: function(o, keys) {
      validator.demandArrayOfGoodStrings(keys, "keys");
      if (!validator.isGoodObject(o)) {
        return false;
      }
      return _.every(keys, function(k) {
        return k in o;
      });
    },
    isGoodArray: function(a) {
      var e, _i, _len;
      if (!(_.isArray(a) && !_.isEmpty(a))) {
        return false;
      }
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        e = a[_i];
        if (e == null) {
          return false;
        }
      }
      return true;
    },
    isGoodString: function(s) {
      if (!(_.isString(s) && s.length > 0)) {
        return false;
      }
      return rgxNonWhitespace.test(s);
    },
    isGoodNumber: function(n) {
      return _.isNumber(n) && _.isFinite(n) && !isNaN(n);
    },
    isArrayOfStrings: function(a) {
      var s, _i, _len;
      if (!_.isArray(a)) {
        return false;
      }
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        s = a[_i];
        if (!_.isString(s)) {
          return false;
        }
      }
      return true;
    },
    isArrayOfGoodStrings: function(a) {
      var s, _i, _len;
      if (!_.isArray(a)) {
        return false;
      }
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        s = a[_i];
        if (!validator.isGoodString(s)) {
          return false;
        }
      }
      return true;
    },
    isArrayOfGoodNumbers: function(a) {
      var n, _i, _len;
      if (!_.isArray(a)) {
        return false;
      }
      for (_i = 0, _len = a.length; _i < _len; _i++) {
        n = a[_i];
        if (!validator.isGoodNumber(n)) {
          return false;
        }
      }
      return true;
    },
    isOfType: function(o, t) {
      validator.demandFunction(t, "t");
      return o instanceof t;
    }
  });

  validator.demandNonEmptyObject = validator.demandGoodObject;

}).call(this);
